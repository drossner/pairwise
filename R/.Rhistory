setwd("~/IdeaProjects/pairwise/R")
###Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(dplyr)
###Libraries
library(ggplot2)
sessions <- read.csv("src/completedSessions.csv", sep = ",", fileEncoding = "UTF-8")
singleSessions <- read.csv("src/singleSessions.csv", sep = ",", fileEncoding = "UTF-8")
filtered <- singleSessions %>%
select(ConceptA, ConceptB, Rating) %>%
mutate(Ordered = ifelse(as.character(ConceptB) < as.character(ConceptA), paste(as.character(ConceptB),as.character(ConceptA)), paste(as.character(ConceptA),as.character(ConceptB)))) %>%
group_by(Ordered) %>%
summarise(Rating = mean(Rating), n = n()) %>%
arrange(desc(n)) %>%
separate(Ordered, c("A", "B"), " ")
ggplot(data = singleSessions) +
aes(x = Rating) +
geom_histogram(aes(y=..density..), binwidth = 0.5) +
geom_density(alpha=.2, fill="red")
###Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
### import CSV-Files
sessions <- read.csv("src/completedSessions.csv", sep = ",", fileEncoding = "UTF-8")
singleSessions <- read.csv("src/singleSessions.csv", sep = ",", fileEncoding = "UTF-8")
##Daniel Tests##
exptest <- qexp(ppoints(length(singleSessions$Duration)))
qqplot(exptest, singleSessions$Duration)
ggplot(data = singleSessions) +
geom_boxplot(mapping = aes(y=singleSessions$Duration)) +
ylab("Duration") +
ggtitle("Boxplot for the duration of all comparisons")
plot(density(log(singleSessions$Duration), adjust= 0.1), col=2)
plot(density(log(singleSessions$Duration), adjust= 0.1), col=1)
plot(density(log(singleSessions$Duration), adjust= 1), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.5), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.5), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.3), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.4), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.5), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.9), col=1)
plot(density(singleSessions$Duration, adjust= 0.9), col=1)
plot(density(log(singleSessions$Duration), adjust= 0.9), col=1)
plot(density(singleSessions$Duration, adjust= 0.9), col=1) #some high values
shapiro.test(log(singleSessions$Duration))
shapiro.test(singleSessions$Duration) #without log
View(singleSessions)
chisq.test(log(singleSessions$Duration), qnorm((ppoints(length(singleSessions$Duration)))))
chisq.test(log(singleSessions$Duration), qnorm())
chisq.test(log(singleSessions$Duration), rnorm())
chisq.test(log(singleSessions$Duration), qnorm(0.5))
chisq.test(log(singleSessions$Duration), qnorm(ppoints(length(singleSessions))))
chisq.test(log(singleSessions$Duration), qnorm(ppoints(length(singleSessions$Duration))))
chisq.test(correct = TRUE, log(singleSessions$Duration), qnorm(ppoints(length(singleSessions$Duration))))
fisher.test(log(singleSessions$Duration), qnorm(ppoints(length(singleSessions$Duration))))
fisher.test(log(singleSessions$Duration), qnorm(ppoints(length(singleSessions$Duration))))
chisq.test(log(singleSessions$Duration), qnorm(ppoints(length(singleSessions$Duration))))
qqplot(exptest, singleSessions$Duration)
qqplot(exptest, singleSessions$Duration)
qqnorm(singleSessions$Duration)
qqline(singleSessions$Duration)
chisq.test(log(singleSessions$Duration), qexp(ppoints(length(singleSessions$Duration))))
chisq.test(log(singleSessions$Duration), rnorm(ppoints(length(singleSessions$Duration))))
chisq.test(log(singleSessions$Duration), rexp(ppoints(length(singleSessions$Duration))))
chisq.test(log(singleSessions$Duration), rnorm(ppoints(length(singleSessions$Duration))))
chisq.test(log(singleSessions$Duration), rexp(ppoints(length(singleSessions$Duration))))
test <- rnorm(50)
chisq.test(singleSessions$Duration, rexp(ppoints(length(singleSessions$Duration))))
pearson.test(log(singleSessions$Duration))
library(pearson)
library(nortest)
install.packages(nortest)
"nortest"
install.packages("nortestARMA")
library(nortestARMA)
pearson.test(log(singleSessions$Duration))
install.packages("nortest")
library(nortest)
pearson.test(log(singleSessions$Duration))
pearson.test(adjust = TRUE, log(singleSessions$Duration))
pearson.test(adjust = TRUE, singleSessions$Duration)
pearson.test(adjust = TRUE, log(singleSessions$Duration))
pearson.test(rnorm(100))
pearson.test(rexp(100))
install.packages("exptest")
library(exptest)
exp.test(singleSessions$Duration)
ep.exp.test(singleSessions$Duration) #Test for exponentiality of Epps and Pulley
ep.exp.test(rexp(100))
ep.exp.test(log(singleSessions$Duration)) #Test for exponentiality of Epps and Pulley
rossberg.exp.test(singleSessions$Duration)
asd
stop()
pearson.test(log(singleSessions$Duration))
pearson.test(adjust = TRUE, log(singleSessions$Duration))
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(log(singleSessions$Duration))
qqplot(exptest, log(singleSessions$Duration))
qqnorm(singleSessions$Duration)
qqline(singleSessions$Duration)
##Daniel Tests##
qqnorm(log(singleSessions$Duration))
e
qqnorm(singleSessions$Duration)
##Daniel Tests##
qqnorm(log(singleSessions$Duration))
qqplot(exptest, singleSessions$Duration)
qqplot(exptest, log(singleSessions$Duration))
qqplot(exptest, singleSessions$Duration)
shapiro.exp.test(log(singleSessions$Duration))
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(rexp(100))
shapiro.exp.test(rexp(20))
shapiro.exp.test(rexp(90000))
shapiro.exp.test(rexp(9000))
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(singleSessions$Duration)
shapiro.exp.test(singleSessions$Duration)
lillie.test(singleSessions$Duration)
lillie.test(log(singleSessions$Duration))
lillie.test(rnorm(1000))
lillie.test(exp(1000))
lillie.test(rexp(1000))
lillie.exp.test(singleSessions$Duration)
frozini.exp.test(rnorm(300))
frozini.exp.test(singleSessions$Duration)
frozini.exp.test(log(singleSessions$Duration))
######################################################################
### Plot für die durchschnittliche Dauer pro Session als Barchart  ###
######################################################################
s = sessions$Session
avg_duration <- sessions$Avg.Duration
df <- data.frame(s, avg_duration)
df
p_col <- ggplot(data=df, aes(s, avg_duration))+
geom_col()+
xlab(NULL)+
ylab("Average Durations")+
coord_flip()
p_col
### Shapiro Wilk Tests für die ersten, zweiten, dritten,... Vergleiche
### speziell für Datensätze zwischen 3 und 5000
### Hat eine gewissen Aussagekraft, allerdings ist bei größeren Werten der
### Solmogorow-Smirnow- oder Chi-Quadrat-Test besser geeignet
shapiro.test(firstComparisons$Duration)
### subsets für alle ersten, zweiten und dritten vergleiche
### für den Rest genauso vorgehen wie bei den anderen nur modulo anpassen
firstComparisons <- subset(singleSessions, 1:nrow(singleSessions)%%8==1)
secondComparisons <- subset(singleSessions, 1:nrow(singleSessions)%%8==2)
thirdComparisons <- subset(singleSessions, 1:nrow(singleSessions)%%8==3)
avg_duration_1 <- mean(firstComparisons$Duration)
avg_duration_2 <- mean(secondComparisons$Duration)
### subsets für alle ersten, zweiten und dritten vergleiche
### für den Rest genauso vorgehen wie bei den anderen nur modulo anpassen
firstComparisons <- subset(singleSessions, 1:nrow(singleSessions)%%8==1)
secondComparisons <- subset(singleSessions, 1:nrow(singleSessions)%%8==2)
thirdComparisons <- subset(singleSessions, 1:nrow(singleSessions)%%8==3)
avg_duration_1 <- mean(firstComparisons$Duration)
avg_duration_2 <- mean(secondComparisons$Duration)
avg_duration_3 <- mean(thirdComparisons$Duration)
######################################################################
### Plot für die durchschnittliche Dauer pro Session als Barchart  ###
######################################################################
s = sessions$Session
avg_duration <- sessions$Avg.Duration
df <- data.frame(s, avg_duration)
df
p_col <- ggplot(data=df, aes(s, avg_duration))+
geom_col()+
xlab(NULL)+
ylab("Average Durations")+
coord_flip()
p_col
### Q-Q Plot, wenn die Punkte näherungsweise an der Linie sind dann liegt eine Normalverteilung vor
qqnorm(firstComparisons$Duration)
qqline(firstComparisons$Duration)
qqnorm(secondComparisons$Duration)
qqline(secondComparisons$Duration)
qqnorm(thirdComparisons$Duration)
qqline(thirdComparisons$Duration)
qqnorm(singleSessions$Duration)
qqline(singleSessions$Duration)
##Daniel Tests##
qqnorm(log(singleSessions$Duration))
exptest <- qexp(ppoints(length(singleSessions$Duration)))
qqplot(exptest, singleSessions$Duration)
qqplot(exptest, log(singleSessions$Duration))
ggplot(data = singleSessions) +
geom_boxplot(mapping = aes(y=singleSessions$Duration)) +
ylab("Duration") +
ggtitle("Boxplot for the duration of all comparisons")
boxplot(log(singleSessions$Duration) ~ singleSessions$qstnr)
plot(density(log(singleSessions$Duration), adjust= 0.9), col=1)
plot(density(singleSessions$Duration, adjust= 0.9), col=1) #some high values
shapiro.test(log(singleSessions$Duration))
shapiro.test(singleSessions$Duration) #without log
pearson.test(log(singleSessions$Duration))
pearson.test(adjust = TRUE, log(singleSessions$Duration))
### Boxplot, Strich in der Mitte ist der Median, wenn dieser zentral in der Box liegt,
### liegt ebenfalls eine Normalverteilung vor
ggplot(data = firstComparisons) +
geom_boxplot(mapping = aes(y=firstComparisons$Duration)) +
ylab("Duration") +
ggtitle("Boxplot for the duration of all first comparisons") +
theme_ipsum_rc()
ggplot(data = secondComparisons) +
geom_boxplot(mapping = aes(y=secondComparisons$Duration)) +
ylab("Duration") +
ggtitle("Boxplot for the duration of all second comparisons") +
theme_ipsum()
ggplot(data = thirdComparisons) +
geom_boxplot(mapping = aes(y=thirdComparisons$Duration)) +
ylab("Duration") +
ggtitle("Boxplot for the duration of all third comparisons") +
theme_ipsum()
### DichteFunktion der jeweiligen Vergleiche, Glockenkurve zum Ablesen ob eine
### Normalverteilung vorliegt
plot(density(firstComparisons$Duration))
ggplot(data = firstComparisons, aes(x=firstComparisons$Duration)) +
geom_density(kernel = "gaussian") +
xlab("Duration") +
ggtitle("density of all first durations")
plot(density(secondComparisons$Duration))
ggplot(data = secondComparisons, aes(x=secondComparisons$Duration)) +
geom_density(kernel = "gaussian") +
xlab("Duration") +
ggtitle("density of all second durations")
plot(density(thirdComparisons$Duration))
ggplot(data = thirdComparisons, aes(x=thirdComparisons$Duration)) +
geom_density(kernel = "gaussian") +
xlab("Duration") +
ggtitle("density of all third durations")
### Das selbe nochmal nur für komplett alle Vergleiche
shapiro.test(singleSessions$Duration)
ggplot(data = singleSessions) + geom_boxplot(mapping = aes(y=singleSessions$Duration)) +
ylab("Duration") +
ggtitle("Boxplot of all durations")
qqnorm(singleSessions$Duration)
qqline(singleSessions$Duration)
### DichteFunktion der jeweiligen Vergleiche, Glockenkurve zum Ablesen ob eine
### Normalverteilung vorliegt
plot(density(firstComparisons$Duration))
ggplot(data = firstComparisons, aes(x=firstComparisons$Duration)) +
geom_density(kernel = "gaussian") +
xlab("Duration") +
ggtitle("density of all first durations")
plot(density(secondComparisons$Duration))
filtered <- singleSessions %>%
select(ConceptA, ConceptB, Rating) %>%
mutate(Ordered = ifelse(as.character(ConceptB) < as.character(ConceptA), paste(as.character(ConceptB),as.character(ConceptA)), paste(as.character(ConceptA),as.character(ConceptB)))) %>%
group_by(Ordered) %>%
summarise(Rating = mean(Rating), n = n()) %>%
arrange(desc(n)) %>%
separate(Ordered, c("A", "B"), " ")
ggplot(data = singleSessions) +
aes(x = Rating) +
geom_histogram(aes(y=..density..), binwidth = 0.5) +
geom_density(alpha=.2, fill="red")
